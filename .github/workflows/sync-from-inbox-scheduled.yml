name: Sync from Inbox (scheduled)

on:
  schedule:
    - cron: "*/2 * * * *" # every 2 minutes
  workflow_dispatch: {}   # manual fallback if you ever want to poke it

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve inbox URL (Public Dev URL by default)
        id: inbox
        run: |
          set -euo pipefail
          # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          # REPLACE with your exact Public Dev URL from Cloudflare R2 Settings
          DEFAULT_PUBLIC_BASE="https://pub-defef221f7d146ada31deea5b1eb2b4f.r2.dev"
          # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          URL="${DEFAULT_PUBLIC_BASE}/inbox/agent-sync.json"
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
          echo "Using inbox URL: ${URL}"

      - name: Download inbox JSON
        id: fetch
        run: |
          set -euo pipefail
          curl -fsSL "${{ steps.inbox.outputs.url }}" -o inbox.json
          jq -r '.' inbox.json
          echo "bundle_url=$(jq -r '.bundle_url' inbox.json)" >> "$GITHUB_OUTPUT"
          echo "sha256=$(jq -r '.sha256' inbox.json)" >> "$GITHUB_OUTPUT"
          echo "mode=$(jq -r '.mode' inbox.json)" >> "$GITHUB_OUTPUT"
          echo "target_branch=$(jq -r '.target_branch' inbox.json)" >> "$GITHUB_OUTPUT"
          echo "version=$(jq -r '.version' inbox.json)" >> "$GITHUB_OUTPUT"
          echo "note=$(jq -r '.note // empty' inbox.json)" >> "$GITHUB_OUTPUT"
          echo "ts=$(jq -r '.ts // empty' inbox.json)" >> "$GITHUB_OUTPUT"

      - name: Skip if same bundle as last time (anti-loop)
        id: gate
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          key="${{ steps.fetch.outputs.bundle_url }}|${{ steps.fetch.outputs.sha256 }}"
          # keep a tiny state file in a release so it persists across runs
          if gh release view __agent_inbox_state__ >/dev/null 2>&1; then
            gh release download __agent_inbox_state__ -p state.txt -q >/dev/null 2>&1 || true
          fi
          touch state.txt
          if grep -qxF "$key" state.txt; then
            echo "unchanged=true" >> "$GITHUB_OUTPUT"
            echo "No change in inbox; skipping."
          else
            echo "$key" >> state.txt
            echo "unchanged=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish state (only on change)
        if: steps.gate.outputs.unchanged == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh release view __agent_inbox_state__ >/dev/null 2>&1 || \
            gh release create __agent_inbox_state__ -t "__agent_inbox_state__" -n "Do not delete"
          gh release upload __agent_inbox_state__ state.txt --clobber

      - name: Stop if unchanged
        if: steps.gate.outputs.unchanged == 'true'
        run: echo "Nothing to do."

      - name: Download bundle
        if: steps.gate.outputs.unchanged == 'false'
        run: |
          set -euo pipefail
          curl -fsSL "${{ steps.fetch.outputs.bundle_url }}" -o bundle.bin
          echo "${{ steps.fetch.outputs.sha256 }}  bundle.bin" | sha256sum -c -

      - name: Apply changes (zip or patch)
        if: steps.gate.outputs.unchanged == 'false'
        run: |
          set -euo pipefail
          mode="${{ steps.fetch.outputs.mode }}"
          rm -rf __incoming && mkdir __incoming
          if [ "$mode" = "zip" ]; then
            unzip -q bundle.bin -d __incoming
            SRC="__incoming"
            count=$(find "__incoming" -mindepth 1 -maxdepth 1 | wc -l)
            if [ "$count" -eq 1 ] && [ -d "$(find "__incoming" -mindepth 1 -maxdepth 1 -type d)" ]; then
              SRC="$(find "__incoming" -mindepth 1 -maxdepth 1 -type d)"
            fi
            set +e
            rsync -a --delete --exclude='.git/' "$SRC"/ .
            code=$?; set -e
            if [ "$code" -ne 0 ] && [ "$code" -ne 24 ]; then
              echo "rsync failed with code $code"; exit "$code"
            fi
          else
            git apply --index bundle.bin
          fi

      - name: Commit
        if: steps.gate.outputs.unchanged == 'false'
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B "${{ steps.fetch.outputs.target_branch }}"
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "chore(sync): import from inbox (${{ steps.fetch.outputs.version }})"
            git push -u origin "${{ steps.fetch.outputs.target_branch }}" --force
          else
            echo "No changes to commit."
          fi

      - name: Open/Update PR to main
        if: steps.gate.outputs.unchanged == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: ${{ steps.fetch.outputs.target_branch }}
          title: "Agent Sync: ${{ steps.fetch.outputs.target_branch }} (${{ steps.fetch.outputs.version }})"
          body: |
            **Inbox:** ${{ steps.inbox.outputs.url }}
            **Bundle:** ${{ steps.fetch.outputs.bundle_url }}
            **SHA256:** ${{ steps.fetch.outputs.sha256 }}
            **Mode:** ${{ steps.fetch.outputs.mode }}
            **Note:** ${{ steps.fetch.outputs.note }}
            **ts:** ${{ steps.fetch.outputs.ts }}
          commit-message: "chore(sync): import from inbox (${{ steps.fetch.outputs.version }})"
          delete-branch: false
