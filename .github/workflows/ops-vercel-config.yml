name: Ops â€“ Configure Vercel (project + envs)

on:
  workflow_dispatch:
    inputs:
      teamSlug:
        description: 'Vercel team slug'
        required: false
        default: 'compliance-loop'
      projectName:
        description: 'Vercel project name'
        required: false
        default: 'complianceloop-site'

jobs:
  configure:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_BYPASS_TOKEN: ${{ secrets.VERCEL_BYPASS_TOKEN }}
      R2_PUBLIC_BASE: https://pub-defef221f7d146ada31deea5b1eb2b4f.r2.dev

    steps:
      - name: Fail early if secrets missing
        run: |
          for v in VERCEL_TOKEN; do
            if [ -z "${!v}" ]; then echo "Missing $v"; exit 1; fi
          done

      - uses: actions/checkout@v4

      - name: Resolve TEAM_ID from team slug
        id: team
        run: |
          TEAM_SLUG="${{ inputs.teamSlug }}"
          TEAM=$(curl -fsSL \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            "https://api.vercel.com/v2/teams?slug=${TEAM_SLUG}")
          TEAM_ID=$(echo "$TEAM" | jq -r '.id // .team.id // empty')
          if [ -z "$TEAM_ID" ] || [ "$TEAM_ID" = "null" ]; then
            echo "Unable to resolve TEAM_ID from slug=${TEAM_SLUG}"
            echo "$TEAM"
            exit 1
          fi
          echo "id=$TEAM_ID" >> $GITHUB_OUTPUT
          echo "TEAM_ID=$TEAM_ID"

      - name: Resolve PROJECT_ID by project name
        id: project
        run: |
          TEAM_ID="${{ steps.team.outputs.id }}"
          NAME="${{ inputs.projectName }}"
          PROJS=$(curl -fsSL \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            "https://api.vercel.com/v9/projects?teamId=${TEAM_ID}&search=${NAME}")
          PROJECT_ID=$(echo "$PROJS" | jq -r --arg n "$NAME" '.projects[] | select(.name==$n) | .id' | head -n1)
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "Unable to resolve PROJECT_ID for $NAME"
            echo "$PROJS"
            exit 1
          fi
          echo "id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "PROJECT_ID=$PROJECT_ID"

      - name: Detect install command from lockfile
        id: install
        run: |
          if [ -f package-lock.json ]; then
            echo "cmd=npm ci --no-audit --no-fund" >> $GITHUB_OUTPUT
          else
            echo "cmd=npm install --no-audit --no-fund" >> $GITHUB_OUTPUT
          fi

      - name: Configure project (framework + root + install/build)
        run: |
          TEAM_ID="${{ steps.team.outputs.id }}"
          PROJECT_ID="${{ steps.project.outputs.id }}"
          cat > body.json <<'JSON'
          {
            "framework": "nextjs",
            "rootDirectory": "",
            "buildCommand": null,
            "installCommand": "REPLACEME_INSTALL"
          }
          JSON
          # inject the computed install command
          sed -i "s|REPLACEME_INSTALL|${{ steps.install.outputs.cmd }}|g" body.json

          curl -fsSL -X PATCH \
            "https://api.vercel.com/v9/projects/${PROJECT_ID}?teamId=${TEAM_ID}" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json" \
            --data-binary @body.json

      - name: Upsert environment variables (skip if value empty)
        run: |
          TEAM_ID="${{ steps.team.outputs.id }}"
          PROJECT_ID="${{ steps.project.outputs.id }}"

          upsert () {
            NAME="$1"; VALUE="$2"; TARGETS='["production","preview","development"]'
            if [ -z "$VALUE" ]; then
              echo "Skipping $NAME (no value)"
              return 0
            fi
            cat > env.json <<JSON
            {
              "type": "plain",
              "key": "$NAME",
              "value": "$VALUE",
              "target": $TARGETS
            }
            JSON
            # Try create; on conflict, patch the key.
            set +e
            CREATE=$(curl -sS -o /dev/stderr -w "%{http_code}" -X POST \
              "https://api.vercel.com/v10/projects/${PROJECT_ID}/env?teamId=${TEAM_ID}" \
              -H "Authorization: Bearer ${VERCEL_TOKEN}" \
              -H "Content-Type: application/json" \
              --data-binary @env.json)
            set -e
            if [ "$CREATE" != "200" ] && [ "$CREATE" != "201" ]; then
              curl -fsSL -X PATCH \
                "https://api.vercel.com/v10/projects/${PROJECT_ID}/env/${NAME}?teamId=${TEAM_ID}" \
                -H "Authorization: Bearer ${VERCEL_TOKEN}" \
                -H "Content-Type: application/json" \
                --data-binary @env.json
            fi
          }

          upsert "R2_PUBLIC_BASE" "${R2_PUBLIC_BASE}"
          upsert "VERCEL_BYPASS_TOKEN" "${VERCEL_BYPASS_TOKEN}"
          # Uncomment and wire any you actually use:
          # upsert "DATABASE_URL" "${{ secrets.DATABASE_URL }}"
          # upsert "AIRTABLE_API_KEY" "${{ secrets.AIRTABLE_API_KEY }}"
          # upsert "AIRTABLE_BASE_ID" "${{ secrets.AIRTABLE_BASE_ID }}"
          # upsert "AIRTABLE_TABLE" "${{ secrets.AIRTABLE_TABLE }}"
          # upsert "ORIGIN_ALLOWLIST" "${{ vars.ORIGIN_ALLOWLIST }}"
          # upsert "USE_DIRECT_WEBHOOKS" "${{ vars.USE_DIRECT_WEBHOOKS }}"

      - name: Reminder to align Preview Bypass secret in UI
        run: |
          echo "Set the Protection Bypass secret to match VERCEL_BYPASS_TOKEN:"
          echo "https://vercel.com/${{ inputs.teamSlug }}/complianceloop-site/settings/protection"
