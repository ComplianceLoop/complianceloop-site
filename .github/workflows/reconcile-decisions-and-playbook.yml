name: reconcile-decisions-and-playbook
on:
  workflow_dispatch: {}
  pull_request:
    paths:
      - "decisions.json"
      - "playbook.md"
      - ".github/workflows/reconcile-decisions-and-playbook.yml"

permissions:
  contents: write
  pull-requests: write

jobs:
  reconcile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Ensure decisions.json exists
        run: |
          if [ ! -f decisions.json ]; then
            echo '{}' > decisions.json
          fi

      - name: Normalize arrays
        shell: bash
        run: |
          jq '
            .workflows = (.workflows // [])
            | .phases    = (.phases // [])
          ' decisions.json > /tmp/normalized.json
          mv /tmp/normalized.json decisions.json

      - name: Render canonical Playbook block (detailed)
        shell: bash
        run: |
          set -Eeuo pipefail
          FILE="decisions.json"
          title_repo=$(jq -r '.repo.owner+"/"+.repo.name' "$FILE" 2>/dev/null || echo "ComplianceLoop/complianceloop-site")
          default_branch=$(jq -r '.repo.defaultBranch // "main"' "$FILE")
          vercel_team=$(jq -r '.vercel.team.slug // .vercel.team // "ComplianceLoop"' "$FILE")
          vercel_project=$(jq -r '.vercel.project // .vercel.projects[]? | select(.role=="app/portal") | .name // "complianceloop-portal"' "$FILE")

          workflows=$(jq -r '.workflows[]? | "- `\(.path)` — " + (.purpose // "")' "$FILE")
          phases=$(jq -r '.phases[]?' "$FILE" | nl -w1 -s") ")
          phase_rows=$(jq -r '
            (.phaseDetails // [])[] |
            "| " + (.phase // "") + " | " + (.objective // "") + " | " + ((.acceptance // []) | join("<br>")) + " |"
          ' "$FILE")

          cust=$(jq -r '(.journeys.customer.flows // [])[] | "### " + .name + "\n" + (.summary // "") + "\n- " + ((.steps // []) | join("\n- ")) + "\n\n**Success:** " + ((.success // []) | join(", ")) + "\n"' "$FILE")
          prov=$(jq -r '(.journeys.provider.flows // [])[] | "### " + .name + "\n" + (.summary // "") + "\n- " + ((.details // .rules // .steps // []) | join("\n- ")) + "\n"' "$FILE")

          apis=$(jq -r '(.apis // [])[] | "- **\(.method)** `\(.path)` — " + (.out // "")' "$FILE")
          models=$(jq -r 'to_entries | map("- **" + .key + "**: " + (.value | join(", "))) | join("\n")' <<< "$(jq '.dataModels' "$FILE")" )

          rules=$(jq -r '
            "- softHoldMinutes: \(.assignmentRules.softHoldMinutes // 15)\n" +
            "- customerMultiPropertyHoldMinutes: \(.assignmentRules.customerMultiPropertyHoldMinutes // 30)\n" +
            "- singleEligibleAutoAssign: \(.assignmentRules.singleEligibleAutoAssign // true)\n" +
            "- acceptWins: \(.assignmentRules.acceptWins // true)"
          ' "$FILE")

          cat > /tmp/cl_block.md <<'EOF'
          <!-- CL:START -->
          # ComplianceLoop — Canonical Plan (Generated)

          **Repo:** ${title_repo} (`${default_branch}`)  
          **Vercel:** project **${vercel_project}** (team: **${vercel_team}**)

          ## Workflows (index)
          ${workflows}

          ## 13 Phases (overview)
          ${phases}

          ## Phase Details (objective & acceptance)
          | Phase | Objective | Acceptance |
          |---|---|---|
          ${phase_rows}

          ## Journey Specs
          ### Customer
          ${cust}

          ### Provider
          ${prov}

          ## APIs (MVP)
          ${apis}

          ## Data Models
          ${models}

          ## Assignment Rules
          ${rules}

          > Edit *decisions.json* to change these sections, then re-run this workflow.
          <!-- CL:END -->
          EOF

          eval "echo \"$(cat /tmp/cl_block.md)\"" > /tmp/cl_block_expanded.md

          PLAYBOOK="playbook.md"
          touch "$PLAYBOOK"
          if grep -q "<!-- CL:START -->" "$PLAYBOOK"; then
            awk '
              BEGIN{inblk=0}
              /<!-- CL:START -->/{inblk=1; system("cat /tmp/cl_block_expanded.md"); next}
              /<!-- CL:END -->/{inblk=0; next}
              { if (!inblk) print }
            ' "$PLAYBOOK" > /tmp/new.md
            mv /tmp/new.md "$PLAYBOOK"
          else
            printf "\n" >> "$PLAYBOOK"
            cat /tmp/cl_block_expanded.md >> "$PLAYBOOK"
          fi

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          branch: chore/reconcile-decisions-and-playbook
          title: "chore(playbook): sync journeys, APIs, data, and phase details from decisions.json"
          body: |
            This PR regenerates the canonical block in `playbook.md` with Journeys, APIs, Data Models, and Phase Details.
            Edit `decisions.json` only; re-run this workflow to refresh.
          add-paths: |
            playbook.md
