{
  "version": 6,
  "updatedAt": "2025-10-03T00:00:00Z",
  "scope": "apps/portal",
  "summary": {
    "status": "phase-in-progress",
    "notes": [
      "DB bootstrap route live and idempotent: /api/providers/bootstrap",
      "Provider application route live: /api/providers/apply",
      "Provider UI page live: /providers/apply",
      "Next: implement provider scoring route: POST /api/providers/score"
    ]
  },
  "rules": {
    "houseFormat": {
      "fullFileReplacementsOnly": true,
      "includeClickableEditorLinks": true,
      "verificationStepsRequired": true,
      "avoidPathAliasesForInfra": true
    },
    "sql": {
      "idempotent": true,
      "patterns": [
        "CREATE TABLE IF NOT EXISTS",
        "CREATE INDEX IF NOT EXISTS",
        "INSERT ... ON CONFLICT DO NOTHING"
      ]
    },
    "neon": {
      "package": "@neondatabase/serverless",
      "importPattern": "import { neon } from '@neondatabase/serverless'; const sql = neon(process.env.DATABASE_URL!);",
      "disallowed": [
        "sql.unsafe",
        "sql.join",
        "sql.array"
      ],
      "notes": "Inline import per route; no '@/lib/neon' alias."
    }
  },
  "schema": {
    "tables": [
      {
        "name": "providers",
        "pk": ["id"],
        "columns": {
          "id": "uuid primary key",
          "company_name": "text not null",
          "contact_email": "text not null",
          "contact_phone": "text",
          "status": "text not null default 'pending'"
        }
      },
      {
        "name": "provider_services",
        "pk": ["provider_id", "service_code"],
        "columns": {
          "provider_id": "uuid not null references providers(id) on delete cascade",
          "service_code": "text not null"
        },
        "indexes": [
          { "name": "idx_provider_services_service_code", "columns": ["service_code"] }
        ]
      },
      {
        "name": "provider_zips",
        "pk": ["provider_id", "zip"],
        "columns": {
          "provider_id": "uuid not null references providers(id) on delete cascade",
          "zip": "text not null check (zip ~ '^[0-9]{5}$')"
        },
        "indexes": [
          { "name": "idx_provider_zips_zip", "columns": ["zip"] },
          { "name": "idx_provider_zips_provider_id", "columns": ["provider_id"] }
        ]
      }
    ]
  },
  "endpoints": [
    {
      "name": "Bootstrap",
      "method": "GET",
      "path": "/api/providers/bootstrap",
      "resultShape": { "ok": true, "applied": 0 }
    },
    {
      "name": "Provider Apply (UI)",
      "method": "POST-via-form",
      "path": "/providers/apply",
      "resultShape": { "ok": true, "providerId": "uuid" }
    },
    {
      "name": "Provider Apply (API)",
      "method": "POST",
      "path": "/api/providers/apply",
      "bodyShape": {
        "companyName": "string",
        "contactEmail": "string",
        "contactPhone": "string|optional",
        "postalCodes": "string: '06010 06011 06012'",
        "services": ["EXIT_SIGN", "E_LIGHT", "EXTINGUISHERS"]
      },
      "resultShape": { "ok": true, "providerId": "uuid" }
    },
    {
      "name": "Provider Score (NEXT)",
      "method": "POST",
      "path": "/api/providers/score",
      "bodyShape": {
        "zip": "06468",
        "services": ["EXIT_SIGN", "E_LIGHT"],
        "limit": 10
      },
      "resultShape": { "ok": true, "providers": [] }
    }
  ],
  "decisions": [
    {
      "id": "2025-10-03-neon-inline",
      "date": "2025-10-03",
      "title": "Use neon() inline per route",
      "why": "Edge/serverless compatible and avoids alias resolution failures.",
      "impact": "No '@/lib/neon' alias; import and construct sql in each route."
    },
    {
      "id": "2025-10-03-sql-style",
      "date": "2025-10-03",
      "title": "Prefer simple parameterized SQL; drop helpers",
      "why": "Client does not expose sql.join/array/unsafe; they caused build/runtime errors.",
      "impact": "Use single-call strings with placeholders as needed; keep idempotent DDL."
    },
    {
      "id": "2025-10-03-provider-coverage",
      "date": "2025-10-03",
      "title": "Model coverage via provider_zips + provider_services",
      "why": "Scoring needs zip + service intersection and stable indexes.",
      "impact": "Bootstrap creates tables + indexes; Apply upserts services and zips."
    },
    {
      "id": "2025-10-03-house-format",
      "date": "2025-10-03",
      "title": "House format: full files + links + verification",
      "why": "Reduce back-and-forth and mistakes during handoff.",
      "impact": "All future work supplies editor links and complete files."
    }
  ],
  "verification": {
    "bootstrap": "https://complianceloop-portal.vercel.app/api/providers/bootstrap",
    "applyUi": "https://complianceloop-portal.vercel.app/providers/apply",
    "applyApi": "https://complianceloop-portal.vercel.app/api/providers/apply"
  },
  "next": {
    "task": "Implement provider scoring endpoint",
    "path": "apps/portal/app/api/providers/score/route.ts",
    "requirements": [
      "POST with { zip, services[], limit }",
      "Return only providers covering given zip AND all requested services",
      "ORDER BY status DESC, company_name ASC",
      "Result shape: { ok: true, providers: [...] }"
    ]
  }
}
