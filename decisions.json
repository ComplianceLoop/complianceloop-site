{
  "version": "2025-10-05.6",
  "currentPhase": "Provider directory & eligibility",
  "phases": [
    {
      "phase": "Design Skin Kit",
      "objective": "Theme tokens, brand, and UI primitives to speed all later pages.",
      "deliverables": ["theme.ts tokens", "globals.css", "Button/Input/Card", "/design-playground"],
      "acceptance": ["Preview renders", "Tokens adjustable with hot reload"],
      "status": "landed",
      "landedAt": "2025-09-27"
    },
    {
      "phase": "Auth + DB base",
      "objective": "Neon + Drizzle schema, passwordless email code, sessions.",
      "deliverables": ["/api/auth/send-code", "/api/auth/verify-code", "users, sessions tables"],
      "acceptance": ["Vercel env DATABASE_URL set", "Auth code roundtrip works", "Dashboard gate honors session"],
      "status": "landed",
      "landedAt": "2025-09-26",
      "verification": ["DATABASE_URL set", "send-code 200", "verify-code 200 (session issued)"]
    },
    {
      "phase": "Files & Certificates (R2)",
      "objective": "Private file storage with signed streaming.",
      "deliverables": ["/api/files/upload", "/api/files/:key", "R2 bucket + IAM"],
      "acceptance": ["Upload returns 200 and r2Key", "Authorized GET streams 200; unauthorized 403"],
      "status": "landed",
      "landedAt": "2025-09-29",
      "notes": [
        "Signer uses R2_ACCOUNT_ID (or R2_ENDPOINT override).",
        "POST /api/files/upload returns { r2Key, putUrl }.",
        "GET /api/files/[key] streams when authed; 403 when unauth."
      ]
    },
    {
      "phase": "Airtable bridge (hybrid)",
      "objective": "Mirror critical records for ops; Neon remains source of record.",
      "deliverables": ["lib/airtable.ts", "scripts/airtable-sync.mjs", ".github/workflows/airtable-sync.yml", "api/airtable/source", "optional: api/airtable/sync"],
      "acceptance": ["One-way sync green in CI", "Backfill job OK"],
      "status": "landed",
      "landedAt": "2025-10-03"
    },
    {
      "phase": "Job model + booking skeleton",
      "objective": "Booking wizard + soft hold creation.",
      "deliverables": ["/book wizard", "create Job(draft) API", "Soft-hold service"],
      "acceptance": ["30m hold for multi-property", "Single-property flow ok"],
      "status": "landed",
      "landedAt": "2025-10-03",
      "notes": ["Stripe preauth flow verified (mock + live).", "Jobs endpoints in place and green."]
    },
    {
      "phase": "Provider directory & eligibility",
      "objective": "Eligibility rules + instant decision.",
      "deliverables": ["criteria engine", "provider onboarding form", "how-to-qualify guidance", "provider scoring endpoint"],
      "acceptance": ["Pass/fail immediate", "Declined path shows guidance", "Scoring endpoint returns eligible providers"],
      "status": "in_progress",
      "startedAt": "2025-10-04",
      "notes": [
        "Provider application form posts to /api/providers/apply.",
        "provider_zips table added (idempotent bootstrap) and populated from application ZIPs.",
        "POST /api/providers/score implemented (zip + services). Ordering: status (active > approved > pending), then company_name ASC; limit 100.",
        "Neon typing guidance: prefer UNNEST CTEs and parameterized sql(text, params) instead of ANY($1) in tagged templates.",
        "Public endpoint exposes CORS (OPTIONS + Access-Control-Allow-* headers) so browser-based API clients work."
      ]
    },
    {
      "phase": "Assignment engine",
      "objective": "First-accept wins + 15m soft-hold + single-eligible auto-assign.",
      "deliverables": ["offer broadcast", "accept endpoint", "cascade logic"],
      "acceptance": ["Race handled; winner locks; cascade on timeout/decline"]
    },
    {
      "phase": "Customer dashboard",
      "objective": "List past/upcoming jobs + files/invoices.",
      "deliverables": ["dashboard pages", "job detail route"],
      "acceptance": ["Auth required", "Documents stream correctly"]
    },
    {
      "phase": "Provider dashboard",
      "objective": "Job queue + day-of checklist + conflict report + tech email routing.",
      "deliverables": ["checklist form", "conflict endpoint", "email routing field"],
      "acceptance": ["Late submission possible", "Conflict auto-cascade"]
    },
    {
      "phase": "Payments & invoices",
      "objective": "Invoice links and settlement (minimal MVP).",
      "deliverables": ["invoice record", "link on job page"],
      "acceptance": ["Invoices viewable; payments later (toggle)"]
    },
    {
      "phase": "Notifications (email/SMS)",
      "objective": "Resend email events; SMS optional later.",
      "deliverables": ["templates", "event triggers"],
      "acceptance": ["Email on accept, conflict, ready-to-download"]
    },
    {
      "phase": "Admin console",
      "objective": "Search jobs/providers; manual override tools.",
      "deliverables": ["admin routes", "impersonate (guarded)"],
      "acceptance": ["Admin-only gate", "Audit trail"]
    },
    {
      "phase": "Polish & launch",
      "objective": "SEO, accessibility, rate limits, QA.",
      "deliverables": ["schema.org Business markup", "robots, sitemaps", "basic rate limiting"],
      "acceptance": ["Lighthouse >=90", "No PII leaks", "Runbook updated"]
    }
  ],
  "phaseProgress": {
    "Airtable bridge (hybrid)": {
      "tasks": [
        { "id": "client", "title": "lib/airtable.ts", "status": "implemented" },
        { "id": "source", "title": "GET /api/airtable/source", "status": "implemented" },
        { "id": "script", "title": "scripts/airtable-sync.mjs", "status": "implemented" },
        { "id": "workflow", "title": "GH Actions: airtable-sync.yml", "status": "implemented" },
        { "id": "trigger", "title": "POST /api/airtable/sync (optional)", "status": "implemented" },
        { "id": "verify", "title": "Run workflow dry-run + normal; confirm green", "status": "implemented" }
      ]
    },
    "Job model + booking skeleton": {
      "tasks": [
        { "id": "wizard", "title": "Booking wizard skeleton", "status": "implemented" },
        { "id": "job-draft", "title": "Create Job(draft) API", "status": "implemented" },
        { "id": "soft-hold", "title": "Soft-hold service", "status": "implemented" }
      ]
    },
    "Provider directory & eligibility": {
      "tasks": [
        { "id": "bootstrap", "title": "DB bootstrap creates providers, provider_services, provider_zips", "status": "implemented" },
        { "id": "apply", "title": "POST /api/providers/apply (upsert services + ZIP rows)", "status": "implemented" },
        { "id": "score", "title": "POST /api/providers/score (zip + services, sorted)", "status": "implemented" }
      ],
      "acceptanceNotes": [
        "Verified 400 for invalid body.",
        "Verified 200 with count=0 for unmatched ZIP.",
        "Verified deterministic order: active > approved > pending; company_name ASC within same status.",
        "CORS enabled to allow browser-based API clients."
      ]
    }
  ],
  "finances": {
    "currency": "USD",
    "oneTime": {
      "items": [
        { "date": "2025-09-26", "label": "New laptop", "amount": 175, "notes": "", "source": "user" },
        { "date": "2025-08-23", "label": "Connecticut LLC filing fee", "amount": 120, "notes": "", "source": "user" },
        { "date": "2025-09-26", "label": "Chat GPT credits", "amount": 100, "notes": "", "source": "user" }
      ],
      "total": 395
    },
    "subscriptions": {
      "items": [
        { "label": "ChatGPT Business", "plan": "Business", "billingInterval": "monthly", "amount": 60, "status": "active", "notes": "" },
        { "label": "Vercel Pro Plan", "plan": "Pro", "billingInterval": "monthly", "amount": 20, "status": "active", "notes": "" },
        { "label": "GitHub Base Plan", "plan": "Free", "billingInterval": "monthly", "amount": 0, "status": "active", "notes": "" },
        { "label": "Porkbun", "plan": "Domain", "billingInterval": "annual", "amount": 11.08, "status": "active", "notes": "" },
        { "label": "Cal.com", "plan": "", "billingInterval": "monthly", "amount": 0, "status": "not_set_up", "notes": "" },
        { "label": "Make", "plan": "", "billingInterval": "monthly", "amount": 0, "status": "active", "notes": "" },
        { "label": "Stripe", "plan": "", "billingInterval": "monthly", "amount": 0, "status": "not_set_up", "notes": "" },
        { "label": "Airtable", "plan": "", "billingInterval": "monthly", "amount": 0, "status": "active", "notes": "" },
        { "label": "Google Workspace", "plan": "", "billingInterval": "monthly", "amount": 39.6, "status": "active", "notes": "" }
      ],
      "monthlyTotal": 119.6,
      "annualOnlyTotal": 11.08,
      "arr": 1446.28
    },
    "lastUpdated": "2025-10-05"
  },
  "links": {
    "editDecisions": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/decisions.json",
    "editPlaybook": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/playbook.md",
    "runReconciler": "https://github.com/ComplianceLoop/complianceloop-site/actions/workflows/reconcile-decisions-and-playbook.yml",
    "pulls": "https://github.com/ComplianceLoop/complianceloop-site/pulls",
    "vercelEnv": "https://vercel.com/compliance-loop/complianceloop-portal/settings/environment-variables",
    "vercelDeployments": "https://vercel.com/compliance-loop/complianceloop-portal/deployments",
    "handoffPrompt": "https://github.com/ComplianceLoop/complianceloop-site/blob/main/handoff/prompt.md"
  },
  "fileActions": {
    "policy": "Use EDIT links if file exists; otherwise use CREATE links.",
    "items": [
        {
          "path": "lib/airtable.ts",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/lib/airtable.ts",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=lib%2Fairtable.ts",
          "purpose": "Airtable REST client (performUpsert)",
          "lastChecked": "2025-10-04"
        },
        {
          "path": "app/api/airtable/source/route.ts",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/app/api/airtable/source/route.ts",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=app%2Fapi%2Fairtable%2Fsource%2Froute.ts",
          "purpose": "JSON export for Airtable sync",
          "lastChecked": "2025-10-04"
        },
        {
          "path": "scripts/airtable-sync.mjs",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/scripts/airtable-sync.mjs",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=scripts%2Fairtable-sync.mjs",
          "purpose": "One-way sync CLI",
          "lastChecked": "2025-10-04"
        },
        {
          "path": ".github/workflows/airtable-sync.yml",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/.github/workflows/airtable-sync.yml",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=.github%2Fworkflows%2Fairtable-sync.yml",
          "purpose": "CI workflow for Airtable sync",
          "lastChecked": "2025-10-04"
        },
        {
          "path": "apps/portal/app/api/providers/bootstrap/route.ts",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/apps/portal/app/api/providers/bootstrap/route.ts",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=apps%2Fportal%2Fapp%2Fapi%2Fproviders%2Fbootstrap%2Froute.ts",
          "purpose": "Idempotent DDL: providers, provider_services, provider_zips + indexes",
          "lastChecked": "2025-10-04"
        },
        {
          "path": "apps/portal/app/api/providers/apply/route.ts",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/apps/portal/app/api/providers/apply/route.ts",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=apps%2Fportal%2Fapp%2Fapi%2Fproviders%2Fapply%2Froute.ts",
          "purpose": "Create provider; upsert services; insert ZIP coverage rows",
          "lastChecked": "2025-10-04"
        },
        {
          "path": "apps/portal/db/bootstrap.sql",
          "exists": true,
          "edit": "https://github.com/ComplianceLoop/complianceloop-site/edit/main/apps/portal/db/bootstrap.sql",
          "create": "https://github.com/ComplianceLoop/complianceloop-site/new/main?filename=apps%2Fportal%2Fdb%2Fbootstrap.sql",
          "purpose": "DDL mirror of provider tables/indexes (idempotent)",
          "lastChecked": "2025-10-04"
        }
    ]
  },
  "operationalNotes": {
    "agentInstructionStyle": [
      "FULL-FILE REPLACEMENTS ONLY for all files (no partial snippets).",
      "Put the Edit/Create link immediately above each file.",
      "Provide numbered click-by-click steps and a concise commit title after files.",
      "Include a Verify section with exact URLs/cURL and expected statuses.",
      "Never edit inside <!-- CL:START --> ... <!-- CL:END --> in playbook.md; use the reset protocol if stale.",
      "ASCII-only JSON for decisions.json.",
      "No secrets in repo; refer to secret names only.",
      "Avoid '@/lib/*' imports that traverse upward directories; prefer stable roots or local relative imports under apps/portal.",
      "Redeploy on Vercel with Use existing Build Cache unchecked when debugging."
    ],
    "reconcilerProcess": {
      "summary": "Run once after edits; use reset protocol if needed.",
      "normalRun": {
        "commitTitle": "playbook: sync decisions",
        "steps": ["Open links.runReconciler and run it", "Open links.pulls and merge the PR it opens"]
      },
      "resetRun": {
        "when": "Only if prior runs report no changes or the block is stale.",
        "steps": [
          "Open links.editPlaybook and replace with '<!-- CL:START -->\\n<!-- CL:END -->' then commit with 'playbook: reset generated block'",
          "Open links.runReconciler and run it",
          "Open links.pulls and merge the PR it opens"
        ]
      }
    },
    "airtableEnv": {
      "vars": ["AIRTABLE_API_KEY", "AIRTABLE_BASE_ID", "AIRTABLE_SYNC_KEY? (for POST /api/airtable/sync)", "BASE_URL? (scripts)", "SYNC_SOURCE_URL?"],
      "note": "Set in Vercel (routes) and GitHub Actions (workflow). Never commit secrets."
    },
    "providerIntake": {
      "summary": "Provider intake + coverage captured and verified.",
      "schema": {
        "tables": [
          { "name": "providers", "pk": ["id"], "columns": { "id": "uuid primary key", "company_name": "text not null", "contact_email": "text not null", "contact_phone": "text", "status": "text not null default 'pending'" } },
          { "name": "provider_services", "pk": ["provider_id", "service_code"], "columns": { "provider_id": "uuid not null references providers(id) on delete cascade", "service_code": "text not null" }, "indexes": [ { "name": "idx_provider_services_service_code", "columns": ["service_code"] } ] },
          { "name": "provider_zips", "pk": ["provider_id", "zip"], "columns": { "provider_id": "uuid not null references providers(id) on delete cascade", "zip": "text not null check (zip ~ '^[0-9]{5}$')" }, "indexes": [ { "name": "idx_provider_zips_zip", "columns": ["zip"] }, { "name": "idx_provider_zips_provider_id", "columns": ["provider_id"] } ] }
        ],
        "serviceCodes": ["EXIT_SIGN", "E_LIGHT", "EXTINGUISHERS"]
      },
      "endpoints": [
        { "name": "Bootstrap", "method": "GET", "path": "/api/providers/bootstrap" },
        { "name": "Provider Apply (UI)", "method": "POST-via-form", "path": "/providers/apply" },
        { "name": "Provider Apply (API)", "method": "POST", "path": "/api/providers/apply" },
        { "name": "Provider Score (implemented)", "method": "POST", "path": "/api/providers/score" }
      ],
      "decisions": [
        "Use @neondatabase/serverless inline in routes; avoid shared alias imports and any .unsafe/sql.join/sql.array usage.",
        "Idempotent DDL: CREATE TABLE IF NOT EXISTS, ON CONFLICT DO NOTHING for multi-row inserts.",
        "Neon typing: prefer UNNEST CTEs and parameterized sql(text, params) over ANY($1) in tagged templates to avoid TypeScript overload issues.",
        "Expose CORS on public read endpoints (OPTIONS + Access-Control-Allow-* headers) so browser clients can exercise APIs during development."
      ]
    }
  },
  "status": { "playbookGeneratedAt": null, "lastReconciledAt": null }
}
